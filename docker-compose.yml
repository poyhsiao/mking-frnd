version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: mking-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-mking_friend}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - '${POSTGRES_PORT:-5432}:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker-volumes/postgres/init:/docker-entrypoint-initdb.d
    networks:
      - mking-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-mking_friend}']
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: mking-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis}
    ports:
      - '${REDIS_PORT:-6379}:6379'
    volumes:
      - redis_data:/data
      - ./docker-volumes/redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - mking-network
    healthcheck:
      test: ['CMD', 'redis-cli', '--raw', 'incr', 'ping']
      interval: 10s
      timeout: 3s
      retries: 5

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: mking-minio
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
    ports:
      - '${MINIO_PORT:-9000}:9000'
      - '${MINIO_CONSOLE_PORT:-9001}:9001'
    volumes:
      - minio_data:/data
    networks:
      - mking-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9000/minio/health/live']
      interval: 30s
      timeout: 20s
      retries: 3

  # Typesense Search Engine
  typesense:
    image: typesense/typesense:0.25.2
    container_name: mking-typesense
    restart: unless-stopped
    environment:
      TYPESENSE_DATA_DIR: /data
      TYPESENSE_API_KEY: ${TYPESENSE_API_KEY:-typesense}
      TYPESENSE_ENABLE_CORS: true
    ports:
      - '${TYPESENSE_PORT:-8108}:8108'
    volumes:
      - typesense_data:/data
    networks:
      - mking-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8108/health']
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: mking-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - '${PROMETHEUS_PORT:-9090}:9090'
    volumes:
      - ./docker-volumes/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - mking-network
    depends_on:
      - postgres
      - redis

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: mking-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: false
    ports:
      - '${GRAFANA_PORT:-3001}:3000'
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker-volumes/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - mking-network
    depends_on:
      - prometheus

  # Loki Log Aggregation
  loki:
    image: grafana/loki:latest
    container_name: mking-loki
    restart: unless-stopped
    command: -config.file=/etc/loki/local-config.yaml
    ports:
      - '${LOKI_PORT:-3100}:3100'
    volumes:
      - ./docker-volumes/loki/loki-config.yml:/etc/loki/local-config.yaml
      - loki_data:/loki
    networks:
      - mking-network

  # Promtail Log Collection
  promtail:
    image: grafana/promtail:latest
    container_name: mking-promtail
    restart: unless-stopped
    command: -config.file=/etc/promtail/config.yml
    volumes:
      - ./docker-volumes/promtail/promtail-config.yml:/etc/promtail/config.yml
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    networks:
      - mking-network
    depends_on:
      - loki

  # Nginx API Gateway (Development)
  nginx:
    image: nginx:alpine
    container_name: mking-nginx
    restart: unless-stopped
    ports:
      - '${NGINX_PORT:-80}:80'
      - '${NGINX_SSL_PORT:-443}:443'
    volumes:
      - ./docker-volumes/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker-volumes/nginx/conf.d:/etc/nginx/conf.d
      - ./docker-volumes/nginx/ssl:/etc/nginx/ssl
    networks:
      - mking-network
    depends_on:
      - postgres
      - redis
      - minio
      - typesense

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  typesense_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local

networks:
  mking-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16