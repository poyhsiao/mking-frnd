name: Release

on:
  push:
    tags:
      - 'v*.*.*'

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Build applications
        run: |
          cd backend
          pnpm run build
          cd ../frontend
          pnpm run build
      
      - name: Generate changelog
        id: changelog
        run: |
          # Extract version from tag
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          # Generate changelog from commits
          CHANGELOG=$(git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD)
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.changelog.outputs.version }}
          release_name: Release ${{ steps.changelog.outputs.version }}
          body: |
            ## Changes in ${{ steps.changelog.outputs.version }}
            
            ${{ steps.changelog.outputs.changelog }}
            
            ## Docker Images
            
            - Backend: `ghcr.io/${{ github.repository }}/backend:${{ steps.changelog.outputs.version }}`
            - Frontend: `ghcr.io/${{ github.repository }}/frontend:${{ steps.changelog.outputs.version }}`
            
            ## Installation
            
            ```bash
            # Clone the repository
            git clone https://github.com/${{ github.repository }}.git
            cd mking-frnd
            
            # Checkout the release tag
            git checkout ${{ steps.changelog.outputs.version }}
            
            # Install pnpm if not already installed
            curl -fsSL https://get.pnpm.io/install.sh | sh -
            
            # Install dependencies
            pnpm install
            
            # Start the application
            docker-compose up -d
            ```
          draft: false
          prerelease: ${{ contains(steps.changelog.outputs.version, '-') }}

  build-and-push-release:
    name: Build and Push Release Images
    runs-on: ubuntu-latest
    needs: create-release
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract version
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      
      - name: Build and push backend release image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/backend:${{ steps.version.outputs.version }}
            ghcr.io/${{ github.repository }}/backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build and push frontend release image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/frontend:${{ steps.version.outputs.version }}
            ghcr.io/${{ github.repository }}/frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [create-release, build-and-push-release]
    environment: production
    if: "!contains(github.ref, '-')"
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Extract version
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      
      - name: Deploy to production
        run: |
          echo "Deploying version ${{ steps.version.outputs.version }} to production..."
          # Add your production deployment commands here
          # For example:
          # kubectl set image deployment/backend backend=ghcr.io/${{ github.repository }}/backend:${{ steps.version.outputs.version }}
          # kubectl set image deployment/frontend frontend=ghcr.io/${{ github.repository }}/frontend:${{ steps.version.outputs.version }}
      
      - name: Notify deployment success
        run: |
          echo "âœ… Successfully deployed version ${{ steps.version.outputs.version }} to production"